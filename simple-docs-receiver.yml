# This goes in DOCS repository
# .github/workflows/generate-api-docs.yml

name: Generate API Documentation

on:
  workflow_dispatch:
    inputs:
      repository_name:
        description: 'Source repository name (owner/repo)'
        required: true
        type: string
        default: 'OpenZeppelin/openzeppelin-contracts'
      tag_name:
        description: 'Tag name to generate docs from'
        required: true
        type: string
        default: 'v5.1.0'
      source_repo_url:
        description: 'Full URL of source repository'
        required: false
        type: string
        default: 'https://github.com/OpenZeppelin/openzeppelin-contracts'

# Configuration: Update this base path for different repositories
env:
  BASE_OUTPUT_PATH: 'content/contracts'

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Log trigger information
        run: |
          echo "🚀 API Documentation Generation Triggered"
          echo "📦 Repository: ${{ inputs.repository_name }}"
          echo "🏷️  Tag: ${{ inputs.tag_name }}"
          echo "🔗 Source URL: ${{ inputs.source_repo_url }}"

      - name: Checkout docs repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine output directory
        id: config
        run: |
          TAG_NAME="${{ inputs.tag_name }}"

          # Extract major version from tag (e.g., v5.1.0 -> 5, release-v6.0 -> 6)
          if [[ "$TAG_NAME" =~ v([0-9]+) ]]; then
            MAJOR_VERSION="${BASH_REMATCH[1]}"
            OUTPUT_DIR="${{ env.BASE_OUTPUT_PATH }}/v${MAJOR_VERSION}.x/api"
          else
            # Fallback for non-standard tags
            OUTPUT_DIR="${{ env.BASE_OUTPUT_PATH }}/5.x/api"
          fi
          echo "📂 Output directory: $OUTPUT_DIR"

          # Use provided URL or construct from repository name
          if [ -n "${{ inputs.source_repo_url }}" ]; then
            REPO_URL="${{ inputs.source_repo_url }}.git"
          else
            REPO_URL="https://github.com/${{ inputs.repository_name }}.git"
          fi

          echo "output-dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT
          echo "repo-url=$REPO_URL" >> $GITHUB_OUTPUT

          echo "🔗 Repository URL: $REPO_URL"

      - name: Generate API Documentation
        run: |
          echo "🔄 Generating API documentation..."

          node scripts/generate-api-docs.js \
            --repo "${{ steps.config.outputs.repo-url }}" \
            --branch "${{ inputs.tag_name }}" \
            --api-output "${{ steps.config.outputs.output-dir }}"

      - name: Commit and push documentation
        run: |
          git config --local user.email "docs-automation@openzeppelin.com"
          git config --local user.name "OpenZeppelin Docs Bot"

          # Check for changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "📝 Committing documentation changes..."

            git add .
            git commit -m "📚 Update API docs for ${{ inputs.repository_name }} ${{ inputs.tag_name }}

            - Repository: ${{ inputs.repository_name }}
            - Tag: ${{ inputs.tag_name }}
            - Output: ${{ steps.config.outputs.output-dir }}
            - Triggered: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

            Auto-generated via workflow_dispatch trigger"

            git push origin main

            echo "✅ Documentation updated successfully"
          else
            echo "ℹ️  No changes detected - documentation is up to date"
          fi

      - name: Create job summary
        run: |
          echo "## 📚 API Documentation Generation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Source Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ inputs.repository_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${{ inputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source URL:** ${{ inputs.source_repo_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Output" >> $GITHUB_STEP_SUMMARY
          echo "- **Directory:** ${{ steps.config.outputs.output-dir }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The API documentation has been generated and committed to the repository."
